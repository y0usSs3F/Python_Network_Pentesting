#!/usr/bin/python3

# Explaining the Complex Details of the main script here for you :)

import scapy.all as scapy


def scan(ip):
    arp_request = scapy.ARP(pdst=ip)  # Create an ARP Packet
    # scapy.ls(scapy.ARP()) # => list all the fields that we can set.
    # arp_request.show()    # => If we have Packet Object we can show all the fields in that packet
    # print(arp_request.summary())

    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")  # Create an Ethernet Frame
    # scapy.ls(scapy.Ether()) # => list all the fields that we can set.
    # broadcast.show()        # => If we have Packet Object we can show all the fields in that packet
    # print(broadcast.summary())

    arp_request_broadcast = broadcast/arp_request   # Combination of arp_request.show() & broadcast.show()
    # arp_request_broadcast.show()   # => If we have Packet Object we can show all the fields in that packet
    # print(arp_request_broadcast.summary())

    # answered_list, unanswered_list = scapy.srp(arp_request_broadcast, timeout=1)  # srp => send, receive packet
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]  # index 0 which is the answered list
    # print(answered_list.summary())

    return answered_list


def printing_result(answer):
    print("IP\t\tMAC Address")
    print("------------------------------------------")
    for element in answer:
        # We Will make it index 1 cuz the answered list contained the two lists (sent packet, response) & we are
        # interested in response
        # print(element[1].show())  # => If we have Packet Object we can show all the fields in that packet
        print(element[1].psrc + "\t" + element[1].hwsrc)   # After show(), we are interested in psrc (IP src) &
        # hwsrc (hardware src)


printing_result(scan("192.168.1.1/24"))
